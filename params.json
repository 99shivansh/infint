{"name":"InfInt","tagline":"Arbitrary-Precision Integer Arithmetic","body":"# Introduction #\r\n\r\nInfInt is simply a lightweight large integer library which consists of a header file. So, all you have to do is to include the header file provided and start using huge integers in your applications.\r\n\r\nYou can download compressed archives of releases here: [DOWNLOADS](http://cppip.blogspot.com/2013/05/infint-downloads.html).\r\n\r\n# Details #\r\n\r\nIt is pretty straight forward to use the library. Just create an instance of InfInt class and start using it:\r\n\r\n```\r\n    InfInt myint1 = \"15432154865413186646848435184100510168404641560358\";\r\n    InfInt myint2 = 156341300544608LL;\r\n\r\n    myint1 *= --myint2 - 3;\r\n    std::cout << myint1 << std::endl;\r\n```\r\n\r\nUseful methods:\r\n  * **intSqrt**:        integer square root operation\r\n  * **digitAt**:        returns digit at index\r\n  * **numberOfDigits**: returns number of digits\r\n  * **size**:           returns size in bytes\r\n  * **toString**:       converts it to a string\r\n\r\nThere are also conversion methods which allow conversion to primitive types: **toInt**, **toLong**, **toLongLong**, **toUnsignedInt**, **toUnsignedLong**, **toUnsignedLongLong**.\r\n\r\nYou may define **INFINT\\_USE\\_EXCEPTIONS** and library methods will start raising InfIntException in case of error instead of writing error messages using std::cerr.\r\n","google":"UA-37850017-2","note":"Don't delete this file! It's used internally to help with page regeneration."}